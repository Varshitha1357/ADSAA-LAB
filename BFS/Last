import java.util.*;

public class BFTAdjList {
    // Implementing BFT
    static void BFT(Map<Character, List<Character>> graph, char startNode) {
        Set<Character> visited = new HashSet<>(); // To keep track of visited nodes
        Queue<Character> queue = new LinkedList<>(); // Queue for BFS

        // Start traversal from the given node
        visited.add(startNode);
        queue.add(startNode);

        System.out.println("Breadth-First Traversal starting from node " + startNode + ":");

        while (!queue.isEmpty()) {
            char node = queue.poll(); // Remove from queue
            System.out.print(node + " "); // Print node

            // Visit all unvisited neighbors
            for (char neighbor : graph.getOrDefault(node, new ArrayList<>())) {
                if (!visited.contains(neighbor)) {
                    visited.add(neighbor);
                    queue.add(neighbor);
                }
            }
        }
        System.out.println();
    }

    public static void main(String[] args) {
        // Creating an adjacency list representation of the graph
        Map<Character, List<Character>> graph = new HashMap<>();
        
        graph.put('a', Arrays.asList('b', 'c'));
        graph.put('b', Arrays.asList('a', 'c', 'd'));
        graph.put('c', Arrays.asList('a', 'b', 'e'));
        graph.put('d', Arrays.asList('b', 'e', 'f'));
        graph.put('e', Arrays.asList('c', 'd', 'f'));
        graph.put('f', Arrays.asList('d', 'e'));

        char startNode = 'a'; // Start BFS from 'a'
        BFT(graph, startNode);
    }
} 
