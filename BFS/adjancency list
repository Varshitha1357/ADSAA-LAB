import java.util.*;

public class BFTAdjList {

    public static List<Integer> bfs(Map<Integer, List<Integer>> adjList, int start) {
        boolean[] visited = new boolean[adjList.size()];
        Queue<Integer> queue = new LinkedList<>();
        List<Integer> result = new ArrayList<>();

        queue.add(start);
        visited[start] = true;

        while (!queue.isEmpty()) {
            int vertex = queue.poll();
            result.add(vertex);

            for (int neighbor : adjList.getOrDefault(vertex, new ArrayList<>())) {
                if (!visited[neighbor]) {
                    queue.add(neighbor);
                    visited[neighbor] = true;
                }
            }
        }
        return result;
    }

    public static void main(String[] args) {
        // Example Graph represented as an Adjacency List
        // 0 - 1 - 2
        // |   |
        // 3 - 4
        Map<Integer, List<Integer>> adjList = new HashMap<>();
        adjList.put(0, Arrays.asList(1, 3));
        adjList.put(1, Arrays.asList(0, 2, 3, 4));
        adjList.put(2, Arrays.asList(1));
        adjList.put(3, Arrays.asList(0, 1, 4));
        adjList.put(4, Arrays.asList(1, 3));

        int startVertex = 0;
        System.out.println("BFS Traversal: " + bfs(adjList, startVertex));

        // Additional test case
        int startVertex2 = 2;
        System.out.println("BFS Traversal from Vertex 2: " + bfs(adjList, startVertex2));
    }
}

output:
BFS Traversal: [0, 1, 3, 2, 4]
BFS Traversal from Vertex 2: [2, 1, 0, 3, 4]
