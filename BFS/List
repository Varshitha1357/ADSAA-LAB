import java.util.*;

// Class to represent a Graph using an Adjacency List
class Graph {
    private int vertices; // Number of vertices
    private LinkedList<Integer> adjList[]; // Adjacency list

    // Constructor
    public Graph(int vertices) {
        this.vertices = vertices;
        adjList = new LinkedList[vertices];
        
        // Initialize the adjacency lists for all vertices
        for (int i = 0; i < vertices; i++) {
            adjList[i] = new LinkedList<>();
        }
    }

    // Method to add an edge to the graph (Undirected Graph)
    public void addEdge(int source, int destination) {
        adjList[source].add(destination);
        adjList[destination].add(source); // Comment this line for a directed graph
    }

    // Method for Breadth-First Traversal starting from the given source
    public void BFS(int startVertex) {
        boolean[] visited = new boolean[vertices]; // Track visited vertices
        Queue<Integer> queue = new LinkedList<>();

        // Mark the start vertex as visited and add it to the queue
        visited[startVertex] = true;
        queue.add(startVertex);

        System.out.print("BFT Traversal: ");

        while (!queue.isEmpty()) {
            int currentVertex = queue.poll();
            System.out.print(currentVertex + " ");

            // Explore all adjacent vertices
            for (int neighbor : adjList[currentVertex]) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    queue.add(neighbor);
                }
            }
        }
        System.out.println();
    }

    // Main method to test the BFS implementation
    public static void main(String[] args) {
        // Create a graph with 5 vertices (0 to 4)
        Graph graph = new Graph(5);

        // Add edges
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 3);
        graph.addEdge(1, 4);
        graph.addEdge(2, 4);

        // Perform BFT starting from vertex 0
        graph.BFS(0);
    }
}
