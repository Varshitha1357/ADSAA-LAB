import java.util.*;

class BFS {

    // BFS from given source s
    static void bfs(int[][] adjMatrix, int s) {
        int V = adjMatrix.length;
        boolean[] visited = new boolean[V];
        Queue<Integer> q = new LinkedList<>();

        visited[s] = true;
        q.add(s);

        while (!q.isEmpty()) {
            int curr = q.poll();
            System.out.print(curr + " ");

            for (int i = 0; i < V; i++) {
                if (adjMatrix[curr][i] == 1 && !visited[i]) {
                    visited[i] = true;
                    q.add(i);
                }
            }
        }
    }

    // Function to add an edge to the graph
    static void addEdge(int[][] adjMatrix, int u, int v) {
        adjMatrix[u][v] = 1;
        adjMatrix[v][u] = 1; // Undirected graph
    }

    public static void main(String[] args) {
        int V = 5;
        int[][] adjMatrix = new int[V][V];

        // Add edges to the graph
        addEdge(adjMatrix, 0, 1);
        addEdge(adjMatrix, 0, 2);
        addEdge(adjMatrix, 1, 3);
        addEdge(adjMatrix, 1, 4);
        addEdge(adjMatrix, 2, 4);

        System.out.println("BFS starting from 0:");
        bfs(adjMatrix, 0);
    }
}
output:
BFS starting from 0:
0 1 2 3 4 
=== Code Execution Successful ===
