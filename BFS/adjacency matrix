import java.util.*;

class BFSadjmatrix {

    static void bfs(int[][] adj, int s) {
        Queue<Integer> q = new LinkedList<>();
        boolean[] visited = new boolean[adj.length];
        visited[s] = true;
        q.add(s);

        while (!q.isEmpty()) {
            int curr = q.poll();
            System.out.print(curr + " ");
            for (int i = 0; i < adj.length; i++) {
                if (adj[curr][i] == 1 && !visited[i]) {
                    visited[i] = true;
                    q.add(i);
                }
            }
        }
    }

    static void addEdge(int[][] adj, int u, int v) {
        adj[u][v] = 1;
        adj[v][u] = 1;
    }

    public static void main(String[] args) {
        int V = 5;
        int[][] adj = new int[V][V];

        addEdge(adj, 0, 1);
        addEdge(adj, 0, 2);
        addEdge(adj, 1, 3);
        addEdge(adj, 1, 4);
        addEdge(adj, 2, 4);

        System.out.println("BFS starting from 0:");
        bfs(adj, 0);
    }
}  

output:
BFS starting from 0:
0 1 2 3 4 
=== Code Execution Successful ===
