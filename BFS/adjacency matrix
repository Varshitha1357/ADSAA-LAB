import java.util.LinkedList;
import java.util.Queue;

public class BFTAdjacencyMatrix {
    private int vertices;
    private int[][] adjMatrix;

    // Constructor to initialize graph
    public BFTAdjacencyMatrix(int vertices) {
        this.vertices = vertices;
        adjMatrix = new int[vertices][vertices];
    }

    // Method to add an edge between two vertices
    public void addEdge(int source, int destination) {
        adjMatrix[source][destination] = 1;
        adjMatrix[destination][source] = 1; // For undirected graph
    }

    // Breadth-First Traversal (BFT) method
    public void BFT(int startVertex) {
        boolean[] visited = new boolean[vertices];
        Queue<Integer> queue = new LinkedList<>();

        // Start from the given vertex
        visited[startVertex] = true;
        queue.add(startVertex);

        System.out.print("Breadth-First Traversal (BFT): ");

        while (!queue.isEmpty()) {
            int currentVertex = queue.poll();
            System.out.print(currentVertex + " ");

            // Check all adjacent vertices
            for (int i = 0; i < vertices; i++) {
                if (adjMatrix[currentVertex][i] == 1 && !visited[i]) {
                    visited[i] = true;
                    queue.add(i);
                }
            }
        }
    }

    public static void main(String[] args) {
        int vertices = 5; // Define the number of vertices
        BFTAdjacencyMatrix graph = new BFTAdjacencyMatrix(vertices);

        // Define edges manually
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 3);
        graph.addEdge(1, 4);
        graph.addEdge(2, 4);
        graph.addEdge(3, 4);

        // Perform BFT starting from vertex 0
        graph.BFT(0);
    }
}
 output:
Breadth-First Traversal (BFT): 0 1 2 3 4 
