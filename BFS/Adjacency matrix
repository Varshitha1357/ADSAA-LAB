import java.util.LinkedList;
import java.util.Queue;

public class BFTAdjacencyMatrix {

    // Perform BFS on the graph
    public static void bfs(int[][] graph, int startVertex) {
        int vertices = graph.length;
        boolean[] visited = new boolean[vertices];  // To track visited vertices
        Queue<Integer> queue = new LinkedList<>();

        // Mark the starting vertex as visited and enqueue it
        visited[startVertex] = true;
        queue.add(startVertex);

        System.out.println("Breadth-First Traversal starting from vertex " + startVertex + ":");

        while (!queue.isEmpty()) {
            int currentVertex = queue.poll();
            System.out.print(currentVertex + " ");

            // Explore all adjacent vertices
            for (int i = 0; i < vertices; i++) {
                if (graph[currentVertex][i] == 1 && !visited[i]) {
                    visited[i] = true;
                    queue.add(i);
                }
            }
        }
    }

    public static void main(String[] args) {
        // Example graph represented as an adjacency matrix
        int[][] graph = {
            {0, 1, 1, 0, 0}, // Vertex 0 is connected to 1 and 2
            {1, 0, 1, 1, 0}, // Vertex 1 is connected to 0, 2, and 3
            {1, 1, 0, 0, 1}, // Vertex 2 is connected to 0, 1, and 4
            {0, 1, 0, 0, 1}, // Vertex 3 is connected to 1 and 4
            {0, 0, 1, 1, 0}  // Vertex 4 is connected to 2 and 3
        };

        // Start BFS from vertex 0
        bfs(graph, 0);
    }
}
output:

Breadth-First Traversal starting from vertex 0:
0 1 2 3 4 
=== Code Execution Successful ===
