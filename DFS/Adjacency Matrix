import java.util.*;

public class DFTAdjacencyMatrix {

    // Method to perform DFS traversal
    public static void dfs(int[][] graph, boolean[] visited, int currentVertex) {
        // Mark the current vertex as visited
        visited[currentVertex] = true;
        System.out.print(currentVertex + " ");

        // Traverse all adjacent vertices
        for (int i = 0; i < graph.length; i++) {
            if (graph[currentVertex][i] == 1 && !visited[i]) {
                dfs(graph, visited, i);  // Recursive call
            }
        }
    }

    public static void main(String[] args) {
        // Example graph represented as an adjacency matrix
        int[][] graph = {
            {0, 1, 1, 0, 0}, // Vertex 0 is connected to 1 and 2
            {1, 0, 1, 1, 0}, // Vertex 1 is connected to 0, 2, and 3
            {1, 1, 0, 0, 1}, // Vertex 2 is connected to 0, 1, and 4
            {0, 1, 0, 0, 1}, // Vertex 3 is connected to 1 and 4
            {0, 0, 1, 1, 0}  // Vertex 4 is connected to 2 and 3
        };

        int vertices = graph.length;
        boolean[] visited = new boolean[vertices];  // To track visited vertices

        System.out.println("Depth-First Traversal starting from vertex 0:");
        dfs(graph, visited, 0);
    }
}

output:
Depth-First Traversal starting from vertex 0:
0 1 2 4 3 
=== Code Execution Successful ===
