import java.util.*;

public class DFTAdjMatrix {

    public static List<Integer> dfs(int[][] adjMatrix, int start) {
        boolean[] visited = new boolean[adjMatrix.length];
        List<Integer> result = new ArrayList<>();
        dfsUtil(adjMatrix, start, visited, result);
        return result;
    }

    private static void dfsUtil(int[][] adjMatrix, int vertex, boolean[] visited, List<Integer> result) {
        visited[vertex] = true;
        result.add(vertex);

        for (int i = 0; i < adjMatrix.length; i++) {
            if (adjMatrix[vertex][i] == 1 && !visited[i]) {
                dfsUtil(adjMatrix, i, visited, result);
            }
        }
    }

    public static void main(String[] args) {
        // Example Graph represented as an Adjacency Matrix
        // 0 - 1 - 2
        // |   |
        // 3 - 4
        int[][] adjMatrix = {
            {0, 1, 0, 1, 0},
            {1, 0, 1, 1, 1},
            {0, 1, 0, 0, 0},
            {1, 1, 0, 0, 1},
            {0, 1, 0, 1, 0}
        };

        int startVertex = 0;
        System.out.println("DFS Traversal: " + dfs(adjMatrix, startVertex));

        // Additional test case
        int startVertex2 = 2;
        System.out.println("DFS Traversal from Vertex 2: " + dfs(adjMatrix, startVertex2));
    }
}

output:
DFS Traversal: [0, 1, 2, 3, 4]
DFS Traversal from Vertex 2: [2, 1, 0, 3, 4]
