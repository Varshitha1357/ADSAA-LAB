import java.util.*;

public class DFTAdjList {

    public static List<Integer> dfs(Map<Integer, List<Integer>> adjList, int start) {
        boolean[] visited = new boolean[adjList.size()];
        List<Integer> result = new ArrayList<>();
        dfsUtil(adjList, start, visited, result);
        return result;
    }

    private static void dfsUtil(Map<Integer, List<Integer>> adjList, int vertex, boolean[] visited, List<Integer> result) {
        visited[vertex] = true;
        result.add(vertex);

        for (int neighbor : adjList.getOrDefault(vertex, new ArrayList<>())) {
            if (!visited[neighbor]) {
                dfsUtil(adjList, neighbor, visited, result);
            }
        }
    }

    public static void main(String[] args) {
        // Example Graph represented as an Adjacency List
        // 0 - 1 - 2
        // |   |
        // 3 - 4
        Map<Integer, List<Integer>> adjList = new HashMap<>();
        adjList.put(0, Arrays.asList(1, 3));
        adjList.put(1, Arrays.asList(0, 2, 3, 4));
        adjList.put(2, Arrays.asList(1));
        adjList.put(3, Arrays.asList(0, 1, 4));
        adjList.put(4, Arrays.asList(1, 3));

        int startVertex = 0;
        System.out.println("DFS Traversal: " + dfs(adjList, startVertex));

        // Additional test case
        int startVertex2 = 2;
        System.out.println("DFS Traversal from Vertex 2: " + dfs(adjList, startVertex2));
    }
}

output:
DFS Traversal: [0, 1, 2, 3, 4]
DFS Traversal from Vertex 2: [2, 1, 0, 3, 4]
