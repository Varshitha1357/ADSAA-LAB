public class NQueens {
    static int N = 4; // Change N to solve for different board sizes
    static int[][] board = new int[N][N];

    public static void main(String[] args) {
        if (solve(0))
            printBoard();
        else
            System.out.println("No solution found.");
    }

    static boolean solve(int col) {
        if (col == N)
            return true;

        for (int row = 0; row < N; row++) {
            if (isSafe(row, col)) {
                board[row][col] = 1;
                if (solve(col + 1))
                    return true;
                board[row][col] = 0; // Backtrack
            }
        }
        return false;
    }

    static boolean isSafe(int row, int col) {
        for (int i = 0; i < col; i++)
            if (board[row][i] == 1)
                return false;

        for (int i = row, j = col; i >= 0 && j >= 0; i--, j--)
            if (board[i][j] == 1)
                return false;

        for (int i = row, j = col; i < N && j >= 0; i++, j--)
            if (board[i][j] == 1)
                return false;

        return true;
    }

    static void printBoard() {
        for (int[] row : board) {
            for (int cell : row)
                System.out.print(cell + " ");
            System.out.println();
        }
    }
}

output:
0 0 1 0 
1 0 0 0 
0 0 0 1 
0 1 0 0 

=== Code Execution Successful ===
