import java.util.*;

public class BFTAdjMatrix {

    public static List<Integer> bfs(int[][] adjMatrix, int start) {
        int n = adjMatrix.length;
        boolean[] visited = new boolean[n];
        Queue<Integer> queue = new LinkedList<>();
        List<Integer> result = new ArrayList<>();

        queue.add(start);
        visited[start] = true;

        while (!queue.isEmpty()) {
            int vertex = queue.poll();
            result.add(vertex);

            for (int i = 0; i < n; i++) {
                if (adjMatrix[vertex][i] == 1 && !visited[i]) {
                    queue.add(i);
                    visited[i] = true;
                }
            }
        }
        return result;
    }

    public static void main(String[] args) {
        // Example Graph represented as an Adjacency Matrix
        // 0 - 1 - 2
        // |   |
        // 3 - 4
        int[][] adjMatrix = {
            {0, 1, 0, 1, 0},
            {1, 0, 1, 1, 1},
            {0, 1, 0, 0, 0},
            {1, 1, 0, 0, 1},
            {0, 1, 0, 1, 0}
        };

        int startVertex = 0;
        System.out.println("BFS Traversal: " + bfs(adjMatrix, startVertex));

        // Additional test case
        int startVertex2 = 2;
        System.out.println("BFS Traversal from Vertex 2: " + bfs(adjMatrix, startVertex2));
    }
}

output:
BFS Traversal: [0, 1, 3, 2, 4]
BFS Traversal from Vertex 2: [2, 1, 0, 3, 4]
