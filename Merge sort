import java.util.Random;

public class MergeSortExact {

    // Merge Sort Function
    public static void mergeSort(int[] arr, int low, int high) {
        if (low < high) {
            int mid = (low + high) / 2;
            mergeSort(arr, low, mid);
            mergeSort(arr, mid + 1, high);
            merge(arr, low, mid, high);
        }
    }

    // Merge Function
    private static void merge(int[] arr, int low, int mid, int high) {
        int[] temp = new int[high - low + 1];
        int i = low, j = mid + 1, k = 0;

        while (i <= mid && j <= high) {
            temp[k++] = (arr[i] <= arr[j]) ? arr[i++] : arr[j++];
        }
        while (i <= mid) temp[k++] = arr[i++];
        while (j <= high) temp[k++] = arr[j++];

        System.arraycopy(temp, 0, arr, low, temp.length);
    }

    // Generate Array for Best, Average, Worst Case
    private static int[] generateArray(int size, String type) {
        int[] arr = new int[size];
        Random rand = new Random();
        for (int i = 0; i < size; i++) {
            arr[i] = (type.equals("Worst")) ? size - i : (type.equals("Best") ? i : rand.nextInt(size));
        }
        return arr;
    }

    // Measure Execution Time in ms
    private static long measureTime(int[] arr) {
        long start = System.nanoTime();
        mergeSort(arr, 0, arr.length - 1);
        return (System.nanoTime() - start) / 1000000; // Convert to ms
    }

    public static void main(String[] args) {
        int[] sizes = {1000, 5000, 10000};

        System.out.println("Size     | Best (ms) | Average (ms) | Worst (ms)");
        System.out.println("---------------------------------------------------");
        
        for (int size : sizes) {
            System.out.printf("%-8d | %-9d | %-13d | %-10d\n",
                size,
                measureTime(generateArray(size, "Best")),
                measureTime(generateArray(size, "Average")),
                measureTime(generateArray(size, "Worst")));
        }
    }
}

output:
Size     | Best (ms) | Average (ms) | Worst (ms)
---------------------------------------------------
1000     | 0         | 0             | 0         
5000     | 2         | 3             | 2         
10000    | 5         | 49            | 21        

=== Code Execution Successful ===
