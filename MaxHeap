import java.util.Arrays;

class MaxHeap {
    private int[] heap;
    private int size;

    public MaxHeap(int capacity) {
        heap = new int[capacity];
        size = 0;
    }

    // Function to insert an element into the heap
    public void insert(int value) {
        if (size == heap.length) {
            resize();
        }
        heap[size] = value;
        size++;
        heapifyUp(size - 1);
    }

    // Resize the heap array when it's full
    private void resize() {
        heap = Arrays.copyOf(heap, heap.length * 2);
    }

    // Helper function to maintain the Max-Heap property while inserting
    private void heapifyUp(int index) {
        int parentIndex = (index - 1) / 2;
        if (index > 0 && heap[index] > heap[parentIndex]) { // Change: '>' for max-heap
            swap(index, parentIndex);
            heapifyUp(parentIndex);
        }
    }

    // Function to delete the maximum element (root) from the heap
    public int deleteMax() {
        if (size == 0) {
            throw new IllegalStateException("Heap is empty");
        }
        int maxValue = heap[0];
        heap[0] = heap[size - 1];
        size--;
        heapifyDown(0);
        return maxValue;
    }

    // Helper function to maintain the Max-Heap property after deletion
    private void heapifyDown(int index) {
        int leftChild = 2 * index + 1;
        int rightChild = 2 * index + 2;
        int largest = index;

        if (leftChild < size && heap[leftChild] > heap[largest]) { // Change: '>' for max-heap
            largest = leftChild;
        }
        if (rightChild < size && heap[rightChild] > heap[largest]) { // Change: '>' for max-heap
            largest = rightChild;
        }

        if (largest != index) {
            swap(index, largest);
            heapifyDown(largest);
        }
    }

    // Swap two elements in the heap
    private void swap(int i, int j) {
        int temp = heap[i];
        heap[i] = heap[j];
        heap[j] = temp;
    }

    // Function to display the heap
    public void display() {
        System.out.println(Arrays.toString(Arrays.copyOfRange(heap, 0, size)));
    }

    // Main method to test the heap operations
    public static void main(String[] args) {
        MaxHeap maxHeap = new MaxHeap(10);

        // Insert elements
        maxHeap.insert(10);
        maxHeap.insert(20);
        maxHeap.insert(5);
        maxHeap.insert(30);
        maxHeap.insert(2);

        System.out.print("Max-Heap before deletion: ");
        maxHeap.display();

        // Delete the maximum element (root)
        System.out.println("Deleted Max Element: " + maxHeap.deleteMax());

        System.out.print("Max-Heap after deletion: ");
        maxHeap.display();
    }
}

output:
Max-Heap before deletion: [30, 20, 5, 10, 2]
Deleted Max Element: 30
Max-Heap after deletion: [20, 10, 5, 2]

=== Code Execution Successful ===
