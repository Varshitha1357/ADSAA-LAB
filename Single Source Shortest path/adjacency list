import java.util.*;

public class DijkstraAdjList {

    static class Edge {
        int target, weight;
        Edge(int t, int w) { target = t; weight = w; }
    }

    public static void dijkstra(List<List<Edge>> graph, int src) {
        int[] dist = new int[graph.size()];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[src] = 0;
        PriorityQueue<Edge> pq = new PriorityQueue<>(Comparator.comparingInt(e -> e.weight));
        pq.offer(new Edge(src, 0));

        while (!pq.isEmpty()) {
            int u = pq.poll().target;
            for (Edge e : graph.get(u)) {
                if (dist[u] + e.weight < dist[e.target]) {
                    dist[e.target] = dist[u] + e.weight;
                    pq.offer(new Edge(e.target, dist[e.target]));
                }
            }
        }
        System.out.println("Vertex\tDistance");
        for (int i = 0; i < dist.length; i++) System.out.println(i + "\t" + dist[i]);
    }

    public static void main(String[] args) {
        List<List<Edge>> graph = Arrays.asList(
            Arrays.asList(new Edge(1, 4), new Edge(2, 4)),
            Arrays.asList(new Edge(2, 2), new Edge(3, 5)),
            Arrays.asList(new Edge(3, 1)),
            Arrays.asList(new Edge(4, 3)),
            Arrays.asList(new Edge(5, 1)),
            new ArrayList<>()
        );
        dijkstra(graph, 0);
    }
}

output:
Vertex	Distance
0	0
1	4
2	4
3	5
4	8
5	9

=== Code Execution Successful ===
