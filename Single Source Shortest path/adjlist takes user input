import java.util.*;

public class DijkstraAdjList {

    static class Edge {
        int target, weight;
        Edge(int t, int w) {
            target = t;
            weight = w;
        }
    }

    public static void dijkstra(List<List<Edge>> graph, int src) {
        int[] dist = new int[graph.size()];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[src] = 0;

        PriorityQueue<Edge> pq = new PriorityQueue<>(new Comparator<Edge>() {
            public int compare(Edge e1, Edge e2) {
                return Integer.compare(e1.weight, e2.weight);
            }
        });
        pq.offer(new Edge(src, 0));

        while (!pq.isEmpty()) {
            int u = pq.poll().target;

            for (Edge e : graph.get(u)) {
                if (dist[u] + e.weight < dist[e.target]) {
                    dist[e.target] = dist[u] + e.weight;
                    pq.offer(new Edge(e.target, dist[e.target]));
                }
            }
        }

        System.out.println("\nVertex\tDistance from Source " + src);
        for (int i = 0; i < dist.length; i++)
            System.out.println(i + "\t" + dist[i]);
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter number of vertices: ");
        int V = sc.nextInt();

        System.out.print("Enter number of edges: ");
        int E = sc.nextInt();

        List<List<Edge>> graph = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            graph.add(new ArrayList<>());
        }

        System.out.println("Enter edges in the format: source target weight");
        for (int i = 0; i < E; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            int w = sc.nextInt();
            graph.get(u).add(new Edge(v, w));
        }

        System.out.print("Enter source vertex: ");
        int src = sc.nextInt();

        dijkstra(graph, src);
        sc.close();
    }
}

sample input:
Enter number of vertices: 4
Enter number of edges: 5
Enter edges in the format: source target weight
0 1 1
0 2 4
1 2 2
1 3 6
2 3 3
Enter source vertex: 0 

sample output:
Vertex	Distance from Source 0
0	0
1	1
2	3
3	6

