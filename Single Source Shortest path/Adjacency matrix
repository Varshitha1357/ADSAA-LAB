import java.util.Arrays;

public class DijkstraMatrix {

    // Dijkstra's Algorithm using Adjacency Matrix
    public static void dijkstra(int[][] graph, int src) {
        int V = graph.length;
        int[] dist = new int[V];
        boolean[] visited = new boolean[V];
        
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[src] = 0;

        for (int i = 0; i < V - 1; i++) {
            int u = getMinVertex(dist, visited, V);
            visited[u] = true;
            
            for (int v = 0; v < V; v++) {
                if (!visited[v] && graph[u][v] != 0 && 
                    dist[u] + graph[u][v] < dist[v]) {
                    dist[v] = dist[u] + graph[u][v];
                }
            }
        }
        printDistances(dist);
    }

    // Find the vertex with the minimum distance
    private static int getMinVertex(int[] dist, boolean[] visited, int V) {
        int min = Integer.MAX_VALUE, minIndex = -1;
        for (int i = 0; i < V; i++) {
            if (!visited[i] && dist[i] < min) {
                min = dist[i];
                minIndex = i;
            }
        }
        return minIndex;
    }

    // Print the final distances
    private static void printDistances(int[] dist) {
        System.out.println("Vertex \t Distance");
        for (int i = 0; i < dist.length; i++) {
            System.out.println(i + " \t\t " + dist[i]);
        }
    }

    public static void main(String[] args) {
        int[][] graph = {
            {0, 4, 0, 0, 0, 0},
            {4, 0, 8, 0, 0, 0},
            {0, 8, 0, 7, 0, 4},
            {0, 0, 7, 0, 9, 14},
            {0, 0, 0, 9, 0, 10},
            {0, 0, 4, 14, 10, 0}
        };
        dijkstra(graph, 0);
    }
}

output:
Vertex 	 Distance
0 		 0
1 		 4
2 		 12
3 		 19
4 		 26
5 		 16

=== Code Execution Successful ===
