import java.util.Arrays;
import java.util.Scanner;

class MinHeap {
    private int[] heap;
    private int size;

    public MinHeap(int capacity) {
        heap = new int[capacity];
        size = 0;
    }

    // Function to insert an element into the heap
    public void insert(int value) {
        if (size == heap.length) {
            resize();
        }
        heap[size] = value;
        size++;
        heapifyUp(size - 1);
    }

    // Resize the heap array when it's full
    private void resize() {
        heap = Arrays.copyOf(heap, heap.length * 2);
    }

    // Helper function to maintain the Min-Heap property while inserting
    private void heapifyUp(int index) {
        int parentIndex = (index - 1) / 2;
        if (index > 0 && heap[index] < heap[parentIndex]) { // '<' for Min-Heap
            swap(index, parentIndex);
            heapifyUp(parentIndex);
        }
    }

    // Function to delete the minimum element (root) from the heap
    public int deleteMin() {
        if (size == 0) {
            throw new IllegalStateException("Heap is empty");
        }
        int minValue = heap[0];
        heap[0] = heap[size - 1];
        size--;
        heapifyDown(0);
        return minValue;
    }

    // Helper function to maintain the Min-Heap property after deletion
    private void heapifyDown(int index) {
        int leftChild = 2 * index + 1;
        int rightChild = 2 * index + 2;
        int smallest = index;

        if (leftChild < size && heap[leftChild] < heap[smallest]) { // '<' for Min-Heap
            smallest = leftChild;
        }
        if (rightChild < size && heap[rightChild] < heap[smallest]) { // '<' for Min-Heap
            smallest = rightChild;
        }

        if (smallest != index) {
            swap(index, smallest);
            heapifyDown(smallest);
        }
    }

    // Swap two elements in the heap
    private void swap(int i, int j) {
        int temp = heap[i];
        heap[i] = heap[j];
        heap[j] = temp;
    }

    // Function to display the heap
    public void display() {
        System.out.println(Arrays.toString(Arrays.copyOfRange(heap, 0, size)));
    }

    // Main method to test the heap operations
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        MinHeap minHeap = new MinHeap(10);

        System.out.print("Enter number of elements to insert into the Min-Heap: ");
        int n = sc.nextInt();

        // Insert elements from user input
        System.out.println("Enter the elements to insert into the Min-Heap:");
        for (int i = 0; i < n; i++) {
            int value = sc.nextInt();
            minHeap.insert(value);
        }

        System.out.print("Min-Heap after insertion: ");
        minHeap.display();

        // Ask if the user wants to delete the minimum element
        System.out.print("Do you want to delete the minimum element? (yes/no): ");
        String choice = sc.next();

        if (choice.equalsIgnoreCase("yes")) {
            System.out.println("Deleted Min Element: " + minHeap.deleteMin());
            System.out.print("Min-Heap after deletion: ");
            minHeap.display();
        } else {
            System.out.println("No deletion performed.");
        }

        sc.close();
    }
}

sample input/output:
Enter number of elements to insert into the Min-Heap: 5
Enter the elements to insert into the Min-Heap:
10
20
5
30
2
Min-Heap after insertion: [2, 5, 10, 30, 20]
Do you want to delete the minimum element? (yes/no): yes
Deleted Min Element: 2
Min-Heap after deletion: [5, 20, 10, 30]
